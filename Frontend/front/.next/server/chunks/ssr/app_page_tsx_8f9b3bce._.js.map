{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/User/OneDrive%20-%20frt.utn.edu.ar/Facultad/2025/Simulaci%C3%B3n/Avance%202/Soft/Frontend/front/app/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  BarChart,\r\n  Bar,\r\n} from \"recharts\";\r\n\r\n// Define the MockData type\r\ntype MockData = {\r\n  acumulacionCarpogrados: Array<{\r\n    mes: string;\r\n    tempMin: number;\r\n    tempMax: number;\r\n    carpogradosDiarios: number;\r\n    carpogradosAcumulados: number;\r\n    diasMes: number;\r\n  }>;\r\n  aplicacionInsecticidas: Array<{\r\n    fechaAplicacion: string;\r\n    generacion: string;\r\n    diasAplicados: number;\r\n    reduccionEsperada: number;\r\n    poblacionPreTratamiento: string;\r\n    poblacionPostTratamiento: string;\r\n  }>;\r\n  analisisEconomico: Array<{\r\n    concepto: string;\r\n    costoPorHectarea: number;\r\n    areaTratada: number;\r\n    costoTotal: number;\r\n    isTotal?: boolean;\r\n    isLoss?: boolean;\r\n    isSaving?: boolean;\r\n  }>;\r\n  eficaciaPrograma: Array<{\r\n    metrica: string;\r\n    sinControl: string;\r\n    conControl: string;\r\n    reduccion: string;\r\n  }>;\r\n};\r\n\r\n// Datos para gráficos\r\nconst chartData = {\r\n  costosPrevencion: [\r\n    { mes: 1, costo: 5 },\r\n    { mes: 10, costo: 12 },\r\n    { mes: 20, costo: 18 },\r\n    { mes: 30, costo: 15 },\r\n  ],\r\n  gradosDias: [\r\n    { fecha: \"22/08\", grados: 8 },\r\n    { fecha: \"23/09\", grados: 16 },\r\n    { fecha: \"24/10\", grados: 12 },\r\n    { fecha: \"25/09\", grados: 18 },\r\n  ],\r\n  poblacionPlagas: [\r\n    { mes: 1, poblacion: 5 },\r\n    { mes: 10, poblacion: 18 },\r\n    { mes: 20, poblacion: 15 },\r\n    { mes: 30, poblacion: 8 },\r\n  ],\r\n  cantidadAtrapada: [\r\n    { trampa: 1, cantidad: 15 },\r\n    { trampa: 2, cantidad: 8 },\r\n    { trampa: 3, cantidad: 12 },\r\n    { trampa: 4, cantidad: 18 },\r\n    { trampa: 5, cantidad: 6 },\r\n    { trampa: 6, cantidad: 14 },\r\n    { trampa: 7, cantidad: 20 },\r\n  ],\r\n};\r\n\r\nexport default function ReportesPage() {\r\n  const [mockData, setMockData] = useState<MockData | null>(null);\r\n\r\n  useEffect(() => {\r\n    const dataString = localStorage.getItem(\"resultadoSimulacion\");\r\n    if (dataString) {\r\n      try {\r\n        const parsed = JSON.parse(dataString);\r\n        setMockData(parsed);\r\n        console.log(\"Mock Data cargado:\", parsed);\r\n      } catch (e) {\r\n        console.error(\"Error al parsear JSON:\", e);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <main className=\"container\">\r\n      <div className=\"header\">\r\n        <Link href=\"/\" className=\"back-button\">\r\n          ← Volver\r\n        </Link>\r\n        <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n          <h1>Reporte de Simulación - Plaga de Carpocapsa</h1>\r\n          <p>Período de Simulación: 1 de Agosto 2024 - 31 de Marzo 2025</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tablas */}\r\n      <div className=\"card\">\r\n        <h2>Acumulación de Carpogrados por Mes</h2>\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Mes</th>\r\n                <th>Temp. Min (°C)</th>\r\n                <th>Temp. Max (°C)</th>\r\n                <th>Carpogrados Diarios</th>\r\n                <th>Carpogrados Acumulados</th>\r\n                <th>Días del Mes</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {mockData?.acumulacionCarpogrados?.map((row, index) => (\r\n                <tr key={index}>\r\n                  <td className=\"bold\">{row.mes}</td>\r\n                  <td>{row.tempMin}</td>\r\n                  <td>{row.tempMax}</td>\r\n                  <td>{row.carpogradosDiarios}</td>\r\n                  <td className=\"bold\">{row.carpogradosAcumulados}</td>\r\n                  <td>{row.diasMes}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"card\">\r\n        <h2>Aplicaciones de Insecticidas</h2>\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Fecha Aplicación</th>\r\n                <th>Generación</th>\r\n                <th>Días Aplicados</th>\r\n                <th>Reducción Esperada (%)</th>\r\n                <th>Población Pre-Tratamiento</th>\r\n                <th>Población Post-Tratamiento</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {mockData?.aplicacionInsecticidas?.map((row, index) => (\r\n                <tr key={index}>\r\n                  <td className=\"bold\">{row.fechaAplicacion}</td>\r\n                  <td>{row.generacion}</td>\r\n                  <td>{row.diasAplicados}</td>\r\n                  <td>\r\n                    <span className=\"chip\">{row.reduccionEsperada}%</span>\r\n                  </td>\r\n                  <td>{row.poblacionPreTratamiento}</td>\r\n                  <td className=\"success bold\">\r\n                    {row.poblacionPostTratamiento}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"card\">\r\n        <h2>Análisis Económico del Control</h2>\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Concepto</th>\r\n                <th>Costo por Hectárea (USD)</th>\r\n                <th>Área Tratada (ha)</th>\r\n                <th>Costo Total (USD)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {mockData?.analisisEconomico?.map((row, index) => (\r\n                <tr\r\n                  key={index}\r\n                  className={\r\n                    row.isTotal\r\n                      ? \"total-row\"\r\n                      : row.isLoss\r\n                      ? \"loss-row\"\r\n                      : row.isSaving\r\n                      ? \"saving-row\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  <td className=\"bold\">{row.concepto}</td>\r\n                  <td>${row.costoPorHectarea.toFixed(2)}</td>\r\n                  <td>{row.areaTratada}</td>\r\n                  <td\r\n                    className={`${\r\n                      row.isSaving ? \"success\" : row.isLoss ? \"error\" : \"\"\r\n                    } bold`}\r\n                  >\r\n                    ${row.costoTotal.toFixed(2)}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"card\">\r\n        <h2>Eficacia del Programa de Control</h2>\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Métrica</th>\r\n                <th>Sin Control</th>\r\n                <th>Con Control</th>\r\n                <th>Reducción (%)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {mockData?.eficaciaPrograma?.map((row, index) => (\r\n                <tr key={index}>\r\n                  <td className=\"bold\">{row.metrica}</td>\r\n                  <td className=\"error\">{row.sinControl}</td>\r\n                  <td className=\"success bold\">{row.conControl}</td>\r\n                  <td>\r\n                    <span className=\"chip\">{row.reduccion}</span>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Agrega aquí tus estilos */}\r\n    </main>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}